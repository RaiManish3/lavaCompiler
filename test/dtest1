PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(INTEGER_LITERAL,'1',1,1)
Action : Shift and goto state 3

State  : 3
Stack  : INTEGER_LITERAL . LexToken(PLUS,'+',1,3)
Action : Reduce rule [expression -> INTEGER_LITERAL] with ['1'] and goto state 2
Result : <NoneType @ 0x7f0b69ed19e0> (None)

State  : 2
Stack  : expression . LexToken(PLUS,'+',1,3)
Action : Shift and goto state 6

State  : 6
Stack  : expression PLUS . LexToken(INTEGER_LITERAL,'3',1,5)
Action : Shift and goto state 3

State  : 3
Stack  : expression PLUS INTEGER_LITERAL . LexToken(MULTIPLY,'*',1,7)
Action : Reduce rule [expression -> INTEGER_LITERAL] with ['3'] and goto state 10
Result : <NoneType @ 0x7f0b69ed19e0> (None)

State  : 10
Stack  : expression PLUS expression . LexToken(MULTIPLY,'*',1,7)
Action : Shift and goto state 4

State  : 4
Stack  : expression PLUS expression MULTIPLY . LexToken(INTEGER_LITERAL,'2',1,9)
Action : Shift and goto state 3

State  : 3
Stack  : expression PLUS expression MULTIPLY INTEGER_LITERAL . $end
Action : Reduce rule [expression -> INTEGER_LITERAL] with ['2'] and goto state 8
Result : <NoneType @ 0x7f0b69ed19e0> (None)

State  : 8
Stack  : expression PLUS expression MULTIPLY expression . $end
Action : Reduce rule [expression -> expression MULTIPLY expression] with [None,'*',None] and goto state 10
Result : <NoneType @ 0x7f0b69ed19e0> (None)

State  : 10
Stack  : expression PLUS expression . $end
Action : Reduce rule [expression -> expression PLUS expression] with [None,'+',None] and goto state 2
Result : <NoneType @ 0x7f0b69ed19e0> (None)

State  : 2
Stack  : expression . $end
Action : Reduce rule [program -> expression] with [None] and goto state 1
Result : <NoneType @ 0x7f0b69ed19e0> (None)

State  : 1
Stack  : program . $end
Done   : Returning <NoneType @ 0x7f0b69ed19e0> (None)
PLY: PARSE DEBUG END
